#!/usr/bin/env bash
set -euo pipefail

# pool - Fast worktree management with pre-seeded pool
#
# This script provides instant worktree creation by maintaining a pool of
# pre-created worktrees that can be claimed and renamed on demand.
#
# Usage:
#   pool <branch-name>              Create/switch to worktree for branch
#   pool init [--bare <url>]        Initialize pool (or convert to bare repo)
#   pool status                     Show pool and worktree status
#   pool refill                     Refill the worktree pool
#   pool clean [type]               Clean up worktrees
#   pool help                       Show detailed help
#
# Examples:
#   pool feature-xyz                Switch to feature-xyz branch instantly
#   pool init                       Initialize pool in current repo
#   pool init --bare git@github...  Clone as bare repo with pool
#   pool clean merged               Remove worktrees for merged branches
#
# Environment:
#   WORKTREE_POOL_SIZE             Number of pre-seeded worktrees (default: 5)

# Configuration
POOL_SIZE=${WORKTREE_POOL_SIZE:-5}
POOL_PREFIX="pool-"
CONFIG_FILE=".worktree-pool"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
confirm() {
    read -p "$1 [y/N] " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

# Pool status management
POOL_STATUS_FILE="$REPO_ROOT/.worktree-pool/pool-status"

is_pool_available() {
    local pool_name=$1
    if [ -f "$POOL_STATUS_FILE" ]; then
        grep -q "^$pool_name:available$" "$POOL_STATUS_FILE"
    else
        return 1
    fi
}

mark_pool_available() {
    local pool_name=$1
    if [ -f "$POOL_STATUS_FILE" ]; then
        # Remove any existing entry and add as available
        grep -v "^$pool_name:" "$POOL_STATUS_FILE" > "${POOL_STATUS_FILE}.tmp" || true
        echo "$pool_name:available" >> "${POOL_STATUS_FILE}.tmp"
        mv "${POOL_STATUS_FILE}.tmp" "$POOL_STATUS_FILE"
    else
        echo "$pool_name:available" > "$POOL_STATUS_FILE"
    fi
}

mark_pool_in_use() {
    local pool_name=$1
    if [ -f "$POOL_STATUS_FILE" ]; then
        # Remove any existing entry and add as in-use
        grep -v "^$pool_name:" "$POOL_STATUS_FILE" > "${POOL_STATUS_FILE}.tmp" || true
        echo "$pool_name:in-use" >> "${POOL_STATUS_FILE}.tmp"
        mv "${POOL_STATUS_FILE}.tmp" "$POOL_STATUS_FILE"
    else
        echo "$pool_name:in-use" > "$POOL_STATUS_FILE"
    fi
}

# Worktree path helpers
get_pool_worktree_path() {
    local pool_name=$1
    echo "$REPO_ROOT/.worktree-pool/$pool_name"
}

get_branch_worktree_path() {
    local branch_name=$1
    # Replace slashes with dashes for filesystem safety
    echo "$REPO_ROOT/${branch_name//\//-}"
}

# Git branch helpers
branch_exists_locally() {
    local branch=$1
    git show-ref --verify --quiet "refs/heads/$branch"
}

branch_exists_remotely() {
    local branch=$1
    git ls-remote --heads origin "$branch" | grep -q "$branch"
}

get_current_branch() {
    git branch --show-current
}

get_merged_branches() {
    git branch -r --merged "origin/$DEFAULT_BRANCH" | grep -v "$DEFAULT_BRANCH" | sed 's/origin\///'
}

# Worktree helpers
worktree_exists() {
    local path=$1
    git worktree list | grep -q "$path"
}

has_uncommitted_changes() {
    ! git diff-index --quiet HEAD -- 2>/dev/null
}

get_worktree_branch() {
    local worktree_path=$1
    local branch_line=$(git worktree list --porcelain | grep -A2 "^worktree $worktree_path" | grep "^branch")
    if [[ $branch_line =~ ^branch[[:space:]]refs/heads/(.+) ]]; then
        echo "${BASH_REMATCH[1]}"
    fi
}

is_pool_worktree() {
    local path=$1
    [[ "$path" =~ \.worktree-pool ]]
}

is_bare_repo() {
    git rev-parse --is-bare-repository 2>/dev/null | grep -q true
}

is_in_worktree() {
    [ "$GIT_COMMON_DIR" != "$GIT_DIR" ]
}

# Pool management helpers
find_available_pool_worktree() {
    if [ -d "$REPO_ROOT/.worktree-pool" ]; then
        for pool_dir in "$REPO_ROOT/.worktree-pool"/${POOL_PREFIX}*; do
            if [ -d "$pool_dir" ]; then
                local pool_name=$(basename "$pool_dir")
                if is_pool_available "$pool_name"; then
                    echo "$pool_dir"
                    return 0
                fi
            fi
        done
    fi
    return 1
}

create_pool_worktree() {
    local pool_name=$1
    local pool_path=$(get_pool_worktree_path "$pool_name")
    
    if [ ! -d "$pool_path" ]; then
        git worktree add -q "$pool_path" -b "$pool_name" "$DEFAULT_BRANCH"
        mark_pool_available "$pool_name"
        return 0
    fi
    return 1
}

open_in_editor() {
    local path=$1
    cd "$path"
    code .
}

# Utility helpers
copy_pool_script() {
    local source=$1
    local dest=$2
    
    if [ -f "$source" ]; then
        cp "$source" "$dest/pool"
        chmod +x "$dest/pool"
    fi
}

count_pool_worktrees() {
    local count=0
    if [ -d "$REPO_ROOT/.worktree-pool" ]; then
        for pool_dir in "$REPO_ROOT/.worktree-pool"/${POOL_PREFIX}*; do
            [ -d "$pool_dir" ] && count=$((count + 1))
        done
    fi
    echo $count
}

count_available_worktrees() {
    local count=0
    if [ -d "$REPO_ROOT/.worktree-pool" ]; then
        for pool_dir in "$REPO_ROOT/.worktree-pool"/${POOL_PREFIX}*; do
            if [ -d "$pool_dir" ]; then
                local pool_name=$(basename "$pool_dir")
                is_pool_available "$pool_name" && count=$((count + 1))
            fi
        done
    fi
    echo $count
}

show_help() {
    cat <<'EOF'
pool - Fast worktree management with pre-seeded pool

USAGE:
    pool <branch-name>              Create/switch to worktree for branch
    pool init [options]             Initialize worktree pool
    pool status                     Show pool and worktree status
    pool refill                     Refill the worktree pool
    pool clean [type]               Clean up worktrees
    pool help                       Show this help message

INIT OPTIONS:
    pool init                       Initialize pool in current repository
    pool init --convert             Convert current repo to bare with worktrees
    pool init --bare <url>          Clone repository as bare with pool
    pool init --pool-size N         Set pool size (default: 5)

CLEAN TYPES:
    pool clean orphaned             Remove orphaned worktrees (safe)
    pool clean stale                Remove worktrees for deleted branches
    pool clean merged               Remove worktrees for merged branches
    pool clean pool                 Reset pool worktrees to clean state
    pool clean all                  Run all cleanup tasks
    pool clean --dry-run [type]     Preview what would be cleaned

WORKFLOW:
    1. Initialize: pool init
    2. Work on feature: pool feature-xyz
    3. Switch branches: pool another-feature
    4. Check status: pool status
    5. Clean up: pool clean merged

CONVERTING TO BARE REPO:
    If you have an existing repository and want to convert it to a bare
    repository with worktrees (recommended for large repos):

    $ pool init --convert

    This will:
    - Create a bare clone of your repository
    - Set up the main worktree
    - Initialize the worktree pool
    - Provide instructions for completing the conversion

ENVIRONMENT VARIABLES:
    WORKTREE_POOL_SIZE    Number of pre-seeded worktrees (default: 5)

EXAMPLES:
    # Initialize pool in current repo
    $ pool init

    # Start working on a new feature
    $ pool feature-authentication

    # Clone a repo as bare with pool
    $ pool init --bare git@github.com:user/repo.git

    # Check pool status
    $ pool status

    # Clean up merged branches
    $ pool clean merged

    # Preview all cleanup actions
    $ pool clean --dry-run all
EOF
}

# Check if we're in a git repository (unless initializing bare)
check_git_repo() {
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        return 1
    fi
    return 0
}

# Get repository info
get_repo_info() {
    GIT_DIR=$(git rev-parse --git-dir)
    GIT_COMMON_DIR=$(git rev-parse --git-common-dir)
    REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || dirname "$GIT_COMMON_DIR")
    DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "main")
    POOL_STATUS_FILE="$REPO_ROOT/.worktree-pool/pool-status"
}

# Initialize worktree pool
init_pool() {
    local pool_size=${1:-$POOL_SIZE}

    log_info "Initializing worktree pool with $pool_size worktrees..."

    # Create pool directory
    mkdir -p "$REPO_ROOT/.worktree-pool"
    
    # Initialize pool status file
    POOL_STATUS_FILE="$REPO_ROOT/.worktree-pool/pool-status"
    : > "$POOL_STATUS_FILE"

    # Initialize pool
    for i in $(seq 1 "$pool_size"); do
        pool_name="${POOL_PREFIX}${i}"
        if create_pool_worktree "$pool_name"; then
            log_info "Created pool worktree $i/$pool_size"
        fi
    done

    log_success "Worktree pool initialized with $pool_size worktrees"
}

# Validation helpers
validate_for_conversion() {
    if ! check_git_repo; then
        log_error "Not in a git repository"
        return 1
    fi

    if is_bare_repo; then
        log_error "Repository is already bare"
        return 1
    fi

    if is_in_worktree; then
        log_error "Cannot convert from within a worktree. Please run from the main repository."
        return 1
    fi

    if has_uncommitted_changes; then
        log_error "You have uncommitted changes. Please commit or stash them first."
        return 1
    fi

    return 0
}

# Convert existing repo to bare
convert_to_bare() {
    if ! validate_for_conversion; then
        return 1
    fi

    get_repo_info

    REPO_NAME=$(basename "$REPO_ROOT")
    PARENT_DIR=$(dirname "$REPO_ROOT")
    CURRENT_BRANCH=$(get_current_branch)

    log_info "Converting $REPO_NAME to bare repository with worktrees..."

    # Create temporary bare clone
    cd "$PARENT_DIR"
    BARE_DIR="${REPO_NAME}.git"

    if [ -d "$BARE_DIR" ]; then
        log_error "Directory $BARE_DIR already exists"
        return 1
    fi

    log_info "Creating bare repository..."
    git clone --bare "$REPO_ROOT" "$BARE_DIR"

    # Set up fetch refs for all branches
    cd "$BARE_DIR"
    git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'

    # Create main worktree with same name as original
    log_info "Creating main worktree..."
    git worktree add "../${REPO_NAME}-main" "$CURRENT_BRANCH"

    # Initialize worktree pool
    get_repo_info
    init_pool

    # Copy pool script if available
    copy_pool_script "$REPO_ROOT/bin/pool" "."

    log_success "Conversion complete!"
    echo ""
    log_info "Next steps:"
    echo "  1. Verify everything works in: $PARENT_DIR/${REPO_NAME}-main"
    echo "  2. Remove old repository: rm -rf $REPO_ROOT"
    echo "  3. Rename directories:"
    echo "     mv $PARENT_DIR/$BARE_DIR $PARENT_DIR/$REPO_NAME"
    echo "     mv $PARENT_DIR/${REPO_NAME}-main $PARENT_DIR/$REPO_NAME/main"
    echo "  4. Use: cd $PARENT_DIR/$REPO_NAME && ./pool <branch-name>"
}

# Clone as bare repository
clone_bare() {
    local repo_url=$1
    local pool_size=${2:-$POOL_SIZE}

    REPO_NAME=$(basename "$repo_url" .git)

    log_info "Cloning $repo_url as bare repository..."

    # Clone bare
    git clone --bare "$repo_url" "$REPO_NAME"
    cd "$REPO_NAME"

    # Set up fetch refs for all branches
    git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
    git fetch origin

    # Determine default branch
    DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "main")

    # Create main worktree
    log_info "Creating main worktree..."
    git worktree add "main" "$DEFAULT_BRANCH"

    # Initialize worktree pool
    get_repo_info
    init_pool "$pool_size"

    # Copy pool script if available
    copy_pool_script "$HOME/dev/dotfiles/bin/pool" "."

    log_success "Setup complete!"
    echo ""
    log_info "Usage: cd $REPO_NAME && ./pool <branch-name>"
}

# Display pool worktree status
display_pool_status() {
    if [ -d "$REPO_ROOT/.worktree-pool" ]; then
        for pool_dir in "$REPO_ROOT/.worktree-pool"/${POOL_PREFIX}*; do
            if [ -d "$pool_dir" ]; then
                local pool_name=$(basename "$pool_dir")
                if is_pool_available "$pool_name"; then
                    echo -e "  ${GREEN}●${NC} $pool_name - available"
                else
                    echo -e "  ${RED}●${NC} $pool_name - in use"
                fi
            fi
        done
    fi
}

# Display active worktrees
display_active_worktrees() {
    git worktree list | grep -v "\.worktree-pool" | grep -v "(bare)" || true
}

# Show pool status
show_status() {
    log_info "Worktree pool status:"
    echo ""

    display_pool_status

    echo ""
    echo "Pool size: $(count_pool_worktrees)"
    echo "Available: $(count_available_worktrees)"
    echo ""

    # Show active worktrees
    log_info "Active worktrees:"
    display_active_worktrees
}

# Refill pool
refill_pool() {
    log_info "Refilling worktree pool..."

    # Create missing pool worktrees
    for i in $(seq 1 "$POOL_SIZE"); do
        pool_name="${POOL_PREFIX}${i}"
        if create_pool_worktree "$pool_name"; then
            log_info "Created pool worktree $pool_name"
        fi
    done

    log_success "Pool refilled"
}

# Clean orphaned worktrees
clean_orphaned() {
    log_info "Cleaning orphaned worktrees..."

    if [ "${DRY_RUN:-false}" = true ]; then
        git worktree list --porcelain | grep -B2 "prunable" || echo "No orphaned worktrees found"
    else
        git worktree prune
        log_success "Orphaned worktrees cleaned"
    fi
}

# Process a single stale worktree
process_stale_worktree() {
    local worktree_path=$1
    local branch=$2
    
    log_warning "Branch '$branch' not found on remote (worktree: $worktree_path)"
    
    if [ "${DRY_RUN:-false}" = false ] && confirm "Remove worktree for deleted branch '$branch'?"; then
        git worktree remove "$worktree_path"
        log_success "Removed worktree: $worktree_path"
    fi
}

# Clean stale branches
clean_stale() {
    log_info "Finding stale branches in worktrees..."

    while IFS= read -r line; do
        if [[ $line =~ ^worktree[[:space:]](.+) ]]; then
            worktree_path="${BASH_REMATCH[1]}"

            # Skip pool worktrees
            if is_pool_worktree "$worktree_path"; then
                continue
            fi

            # Get branch info
            local branch=$(get_worktree_branch "$worktree_path")
            if [ -n "$branch" ]; then
                # Check if branch exists on remote
                if ! branch_exists_remotely "$branch"; then
                    process_stale_worktree "$worktree_path" "$branch"
                fi
            fi
        fi
    done < <(git worktree list --porcelain)
}

# Reset a single pool worktree
reset_pool_worktree() {
    local pool_dir=$1
    local pool_name=$2
    
    cd "$pool_dir"
    
    if has_uncommitted_changes; then
        log_warning "Pool worktree $pool_name has uncommitted changes"
        
        if [ "${DRY_RUN:-false}" = false ] && confirm "Reset pool worktree $pool_name?"; then
            git reset --hard
            git clean -fd
            git checkout "$pool_name"
            log_success "Reset pool worktree: $pool_name"
        fi
    fi
    
    cd "$REPO_ROOT"
}

# Reset pool worktrees
clean_pool() {
    log_info "Resetting pool worktrees..."

    if [ ! -d "$REPO_ROOT/.worktree-pool" ]; then
        log_warning "No worktree pool found"
        return
    fi

    for pool_dir in "$REPO_ROOT/.worktree-pool"/${POOL_PREFIX}*; do
        if [ -d "$pool_dir" ]; then
            local pool_name=$(basename "$pool_dir")

            # Check if marked as available but has changes
            if is_pool_available "$pool_name"; then
                reset_pool_worktree "$pool_dir" "$pool_name"
            fi
        fi
    done
}

# Process a single merged worktree
process_merged_worktree() {
    local worktree_path=$1
    local branch=$2
    
    log_warning "Branch '$branch' has been merged (worktree: $worktree_path)"
    
    if [ "${DRY_RUN:-false}" = false ] && confirm "Remove worktree for merged branch '$branch'?"; then
        git worktree remove "$worktree_path"
        git branch -d "$branch" 2>/dev/null || true
        log_success "Removed worktree and branch: $branch"
    fi
}

# Check if branch is merged
is_branch_merged() {
    local branch=$1
    local merged_branches=$2
    echo "$merged_branches" | grep -q "^$branch$"
}

# Remove worktrees for merged branches
clean_merged() {
    log_info "Finding worktrees with merged branches..."

    # Update remote branches
    git fetch origin --prune

    # Get merged branches
    local merged_branches=$(get_merged_branches)

    while IFS= read -r line; do
        if [[ $line =~ ^worktree[[:space:]](.+) ]]; then
            worktree_path="${BASH_REMATCH[1]}"

            # Skip pool worktrees and bare repo
            if is_pool_worktree "$worktree_path" || [[ "$worktree_path" =~ \(bare\) ]]; then
                continue
            fi

            # Get branch info
            local branch=$(get_worktree_branch "$worktree_path")
            if [ -n "$branch" ] && is_branch_merged "$branch" "$merged_branches"; then
                process_merged_worktree "$worktree_path" "$branch"
            fi
        fi
    done < <(git worktree list --porcelain)
}

# Create worktree without pool
create_worktree_direct() {
    local branch_name=$1
    local worktree_path=$2
    
    if branch_exists_remotely "$branch_name"; then
        log_info "Branch exists remotely, checking out..."
        git worktree add "$worktree_path" -b "$branch_name" "origin/$branch_name"
    else
        log_info "Creating new branch..."
        git worktree add "$worktree_path" -b "$branch_name" "$DEFAULT_BRANCH"
    fi
}

# Setup branch in pool worktree
setup_branch_in_pool() {
    local pool_worktree=$1
    local branch_name=$2
    
    cd "$pool_worktree"
    git fetch origin
    
    if branch_exists_remotely "$branch_name"; then
        log_info "Checking out existing branch..."
        git checkout -B "$branch_name" "origin/$branch_name"
    else
        log_info "Creating new branch..."
        git checkout -B "$branch_name" "$DEFAULT_BRANCH"
    fi
    
    cd "$REPO_ROOT"
}

# Refill pool in background
refill_pool_async() {
    local pool_name=$1
    
    (
        sleep 2
        local new_pool_path=$(get_pool_worktree_path "$pool_name")
        if [ ! -d "$new_pool_path" ]; then
            git worktree add -q "$new_pool_path" -b "$pool_name" "$DEFAULT_BRANCH" 2>/dev/null
            mark_pool_available "$pool_name"
        fi
    ) &
}

# Create or switch to worktree
create_worktree() {
    local branch_name=$1
    local worktree_path=$(get_branch_worktree_path "$branch_name")

    log_info "Setting up worktree for branch: $branch_name"

    # Check if worktree already exists
    if worktree_exists "$worktree_path"; then
        log_warning "Worktree already exists at $worktree_path"
        open_in_editor "$worktree_path"
        return
    fi

    # Find an available worktree from the pool
    local pool_worktree=$(find_available_pool_worktree)
    
    if [ -z "$pool_worktree" ]; then
        log_warning "No available worktrees in pool. Creating new worktree..."
        create_worktree_direct "$branch_name" "$worktree_path"
    else
        # Use pool worktree
        local pool_name=$(basename "$pool_worktree")
        log_info "Using pool worktree: $pool_name"

        # Mark as in use
        mark_pool_in_use "$pool_name"

        # Check if target already exists
        if [ -d "$worktree_path" ]; then
            log_warning "Directory already exists at $worktree_path"
            mark_pool_available "$pool_name"
            open_in_editor "$worktree_path"
            return
        fi

        # Setup branch in pool worktree
        setup_branch_in_pool "$pool_worktree" "$branch_name"

        # Move the worktree directory
        git worktree move "$pool_worktree" "$worktree_path"
        git worktree repair

        # Refill pool in background
        refill_pool_async "$pool_name"
    fi

    # Open in VS Code
    log_success "Opening $worktree_path in VS Code..."
    open_in_editor "$worktree_path"

    # Show status
    echo ""
    log_info "Worktree ready at: $worktree_path"
    log_info "Branch: $branch_name"
}

# Main command handling
case "${1:-}" in
help | --help | -h)
    show_help
    ;;

init)
    shift
    if [ "${1:-}" = "--convert" ]; then
        convert_to_bare
    elif [ "${1:-}" = "--bare" ] && [ -n "${2:-}" ]; then
        pool_size=$POOL_SIZE
        if [ "${3:-}" = "--pool-size" ] && [ -n "${4:-}" ]; then
            pool_size=$4
        fi
        clone_bare "$2" "$pool_size"
    else
        if ! check_git_repo; then
            log_error "Not in a git repository"
            exit 1
        fi
        get_repo_info

        # Check if already in a worktree
        if [ "$GIT_COMMON_DIR" != "$GIT_DIR" ]; then
            log_error "Cannot initialize pool from within a worktree. Please run from the main repository."
            exit 1
        fi

        pool_size=$POOL_SIZE
        if [ "${1:-}" = "--pool-size" ] && [ -n "${2:-}" ]; then
            pool_size=$2
        fi

        init_pool "$pool_size"
    fi
    ;;

status)
    if ! check_git_repo; then
        log_error "Not in a git repository"
        exit 1
    fi
    get_repo_info
    show_status
    ;;

refill)
    if ! check_git_repo; then
        log_error "Not in a git repository"
        exit 1
    fi
    get_repo_info
    refill_pool
    ;;

clean)
    if ! check_git_repo; then
        log_error "Not in a git repository"
        exit 1
    fi
    get_repo_info

    shift
    DRY_RUN=false
    CLEAN_TYPE=""

    # Parse clean arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        *)
            CLEAN_TYPE="$1"
            shift
            ;;
        esac
    done

    case "$CLEAN_TYPE" in
    orphaned)
        clean_orphaned
        ;;
    stale)
        clean_stale
        ;;
    pool)
        clean_pool
        ;;
    merged)
        clean_merged
        ;;
    all)
        log_info "Running all cleanup tasks..."
        clean_orphaned
        echo ""
        clean_stale
        echo ""
        clean_pool
        echo ""
        clean_merged
        log_success "All cleanup tasks completed"
        ;;
    *)
        log_error "Unknown clean type: $CLEAN_TYPE"
        echo "Valid types: orphaned, stale, pool, merged, all"
        exit 1
        ;;
    esac

    if [ "$DRY_RUN" = true ]; then
        echo ""
        log_warning "This was a dry run. No changes were made."
    fi
    ;;

"")
    log_error "No command provided"
    echo "Usage: pool <branch-name> or pool help"
    exit 1
    ;;

*)
    # Assume it's a branch name
    if ! check_git_repo; then
        log_error "Not in a git repository"
        exit 1
    fi
    get_repo_info
    create_worktree "$1"
    ;;
esac
