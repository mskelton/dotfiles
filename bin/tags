#!/usr/bin/env bash
# Find JSX tags
# vim:filetype=bash

cwd="$(pwd)"
format="rich"

_print_help() {
	if [ -n "$1" ]; then
		printf "%s\n\n" "$1"
	fi

	echo "Usage: tags [options] <name> [attribute] [value]

Options:
  -h, --help             Display this help message and exit
  -c, --cwd <dir>        Set the current working directory to <dir>
  -f, --format <format>  Set the output format (short|long|vi|quickfix)

Arguments:
  <name>                 The tag name to search for
  [attribute]            Filter by attribute
  [value]                Filter by attribute value"
}

# Parse the command line args
_parse_args() {
	while [[ $# -gt 0 ]]; do
		case "$1" in
		-h | --help)
			_print_help "Find JSX tags"
			exit 0
			;;
		-c | --cwd)
			cwd="$2"
			shift 2
			;;
		-f | --format)
			if [[ "$2" == 'short' ]]; then
				format="short"
			elif [[ "$2" == 'long' ]]; then
				format="rich"
			elif [[ "$2" == 'vi' || "$2" == 'quickfix' ]]; then
				format="quickfix"
			else
				_print_help "Invalid format: $2"
				exit 1
			fi

			shift 2
			;;
		*)
			if [ -z "$name" ]; then
				name="$1"
			elif [ -z "$attribute" ]; then
				attribute="$1"
			elif [ -z "$value" ]; then
				value="$1"
			else
				_print_help "Unexpected argument: $1"
				exit 1
			fi

			shift
			;;
		esac
	done
}

# Split a dot-separated string into parts.
_split() {
	echo "$1" | while IFS='.' read -ra parts; do
		for part in "${parts[@]}"; do
			echo "$part"
		done
	done
}

# Generate a rule for finding JSX tags
_get_rule() {
	namespaced_tag=($(_split "$name"))
	head="
id: tags
language: TSX
utils:
  is-tag:
    any:
      - kind: jsx_opening_element
      - kind: jsx_self_closing_element
    has:
      any:
        - kind: identifier
          regex: '^$name$'
        - kind: member_expression
          all:
            - has:
                kind: identifier
                field: object
                regex: '^${namespaced_tag[0]}$'
            - has:
                kind: property_identifier
                field: property
                regex: '^${namespaced_tag[1]}$'
"

	if [ -n "$attribute" ]; then
		echo "
$head
rule:
  kind: jsx_attribute
  all:
    - has:
        kind: property_identifier
        regex: '^$attribute$'
    $(if [ -n "$value" ]; then
      # TODO: Support boolean, boolean shorthand, null, undefined, and template literals
      echo "
    - has:
        any:
          - kind: string
            has:
              kind: string_fragment
              regex: '^$value$'
          - has:
              kind: number
              regex: '^$value$'
"
		fi)
  inside:
    matches: is-tag
"
	else
		echo "
$head
rule:
  matches: is-tag
"
	fi
}

# Format each line of the JSON output using the quickfix notation
_format_as_qfix_list() {
	while IFS= read -r line; do
		echo "$line" | jq -r '"\(.file):\(.range.start.line):\(.range.start.column): \(.lines)"'
	done
}

# Run the scan in JSON or rich format
_scan() {
	if [[ "$format" == 'quickfix' ]]; then
		sg scan --json=stream "$@" | _format_as_qfix_list
	else
		sg scan "$@" --report-style="$format"
	fi
}

# Find JSX tags
_find_tags() {
	if [ -z "$name" ]; then
		_print_help "Missing name argument"
		exit 1
	fi

	_scan \
    --config "$HOME/.sgconfig.yml" \
    --inline-rules "$(_get_rule)" \
		"$cwd"
}

_parse_args "$@"
_find_tags
