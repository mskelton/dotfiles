#!/usr/bin/env bash
# Find JavaScript imports

cwd="$(pwd)"
format="rich"

_print_help() {
	if [ -n "$1" ]; then
		printf "%s\n\n" "$1"
	fi

	echo "Usage: imports [options] <source> [specifier]

Options:
  -h, --help             Display this help message and exit
  -c, --cwd <dir>        Set the current working directory to <dir>
  -f, --format <format>  Set the output format (short|long|vi|quickfix)

Arguments:
  <source>               The import source to search for
  [specifier]            Only return imports containing this specifier"
}

# Parse the command line args
_parse_args() {
	while [[ $# -gt 0 ]]; do
		case "$1" in
		-h | --help)
			_print_help "Find JavaScript imports"
			exit 0
			;;
		-c | --cwd)
			cwd="$2"
			shift 2
			;;
		-f | --format)
			if [[ "$2" == 'short' ]]; then
				format="short"
			elif [[ "$2" == 'long' ]]; then
				format="rich"
			elif [[ "$2" == 'vi' || "$2" == 'quickfix' ]]; then
				format="quickfix"
			else
				_print_help "Invalid format: $2"
				exit 1
			fi

			shift 2
			;;
		*)
			if [ -z "$source" ]; then
				source="$1"
			elif [ -z "$specifier" ]; then
				specifier="$1"
			else
				_print_help "Unexpected argument: $1"
				exit 1
			fi

			shift
			;;
		esac
	done
}

# Convert a string to a regex
_to_regex() {
	# If already in regex format, return as is removing the leading and traililng /
	if [[ "$1" == /* && "$1" == */ ]]; then
		echo "${1:1:${#1}-2}"
	else
		echo "^$1$"
	fi
}

_get_rule() {
	head="
id: imports
language: TSX
utils:
  is-import:
    kind: import_statement
    has:
      kind: string
      field: source
      has:
        kind: string_fragment
        regex: '$(_to_regex "$1")'
  "

	# If a specifier is provided, we search for the specifier within the
	# import given the specified source.
	if [ -n "$2" ]; then
		echo "
$head
rule:
  kind: import_specifier
  regex: '$(_to_regex "$2")'
  inside:
    kind: named_imports
    inside:
      kind: import_clause
      inside:
        matches: is-import
"
	else
		echo "
$head
rule:
  matches: is-import
"
	fi
}

# Format each line of the JSON output using the quickfix notation
_format_as_qfix_list() {
	jq -r '.[] | "\(.file):\(.range.start.line + 1):\(.range.start.column + 1): \(.lines)"'
}

# Run the scan in JSON or rich format
_scan() {
	if [[ "$format" == 'quickfix' ]]; then
		sg scan --json=compact "$@" | _format_as_qfix_list
	else
		sg scan "$@" --report-style="$format"
	fi
}

# Find JavaScript imports
_find_imports() {
	if [ -z "$source" ]; then
		_print_help "Missing source argument"
		exit 1
	fi

	_scan \
		--config "$HOME/.sgconfig.yml" \
		--inline-rules "$(_get_rule "$source" "$specifier")" \
		"$cwd"
}

_parse_args "$@"
_find_imports
