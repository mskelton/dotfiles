#!/usr/bin/env bash
# Create or connect to a tmux session

function list_sessions {
	tmux list-sessions -F "#{session_id} #{session_name} #{session_path}" 2>/dev/null
}

# Loop over existing session to check if the requested session already exists
function find_session {
	while IFS= read line; do
		IFS=' ' read -a session <<<"$line"

		if [[ "$1" == "${session[1]}" || "$2" == "${session[2]}" ]]; then
			echo "${session[0]}"
			return
		fi
	done
}

# Default to the current working directory if not specified
dir="${1:-$(pwd)}"
resolved_dir=$(readlink "$dir")

# If a directory is provided but does not exist, attempt to find it in the
# current directory.
if [[ ! -d "$resolved_dir" ]]; then
	resolved_dir="$(pwd)/$dir"
fi

# If the directory is still not found, assume it's in ~/dev
if [[ ! -d "$resolved_dir" ]]; then
	resolved_dir="$HOME/dev/$dir"
fi

# If no name was provided, use the directory name
name="${2:-$(basename $resolved_dir | sed "s/^\.\$/$(basename $(pwd))/" | sed 's/[^A-z\d]/-/g')}"
session_id=$(list_sessions | find_session "$name" "$resolved_dir")

if [[ -n $session_id ]]; then
	# Attach if outside of Tmux, otherwise switch to it
	if [[ -z "$TMUX" ]]; then
		tmux attach-session -t $session_id
	else
		tmux switch-client -t $session_id
	fi
else
	if [[ -z "$TMUX" ]]; then
		# If we are outside a Tmux session, we can create a new session and attach
		# to it in one pass.
		tmux new-session -A -c "$resolved_dir" -s "$name"
	else
		# If we are inside a Tmux session, it's a little more work. First we create
		# a detached session and then we switch to it.
		tmux new-session -d -c "$resolved_dir" -s "$name"
		tmux switch-client -t "$name"
	fi
fi
