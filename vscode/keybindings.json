[
  // Open new windows as OS windows
  {
    "key": "shift+cmd+n",
    "command": "-workbench.action.newWindow"
  },
  {
    "key": "shift+cmd+n",
    "command": "workbench.action.newWindowTab"
  },
  // Navigate between OS windows
  {
    "key": "cmd+e",
    "command": "workbench.action.showNextWindowTab"
  },
  {
    "key": "cmd+shift+e",
    "command": "workbench.action.showPreviousWindowTab"
  },
  // Create new editors, files, and terminals
  {
    "key": "cmd+n",
    "command": "explorer.newFile",
    "when": "explorerViewletFocus && explorerViewletVisible"
  },
  {
    "key": "cmd+n",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus && !terminalEditorFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+`",
    "command": "-workbench.action.terminal.new",
    "when": "terminalProcessSupported"
  },
  // Close terminals and editors
  {
    "key": "cmd+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus && !terminalEditorFocus && terminalProcessSupported"
  },
  {
    "key": "cmd+w",
    "command": "workbench.action.terminal.killEditor",
    "when": "terminalEditorFocus && terminalProcessSupported"
  },
  {
    "key": "cmd+w",
    "command": "-workbench.action.closeWindow"
  },
  // Save all
  {
    "key": "cmd+shift+s",
    "command": "saveAll"
  },
  // Use cmd+shift+a to focus the current file in the explorer
  {
    "key": "cmd+shift+a",
    "command": "workbench.files.action.showActiveFileInExplorer"
  },
  // Open the workspace find replace in the sidebar
  {
    "key": "shift+cmd+r",
    "command": "workbench.action.replaceInFiles"
  },
  {
    "key": "shift+cmd+h",
    "command": "-workbench.action.replaceInFiles"
  },
  // Use cmd+d to split the terminal when the terminal is focused.
  {
    "key": "cmd+d",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported"
  },
  // User hyper+l for inserting a console.log snippet
  {
    "key": "cmd+alt+shift+ctrl+l",
    "command": "editor.action.insertSnippet",
    "args": { "snippet": "console.log($0)" }
  },
  // Use hyper+. for inserting an arrow function
  {
    "key": "cmd+ctrl+shift+alt+=",
    "command": "editor.action.insertSnippet",
    "args": { "snippet": "() => ${1:{ $0 \\}}" }
  },
  // Clear existing ctrl+j and ctrl+k shortcuts
  {
    "key": "ctrl+j",
    "command": "-editor.action.joinLines"
  },
  {
    "key": "ctrl+j",
    "command": "-extension.vim_ctrl+j"
  },
  {
    "key": "ctrl+k",
    "command": "-deleteAllRight"
  },
  {
    "key": "ctrl+k",
    "command": "-extension.vim_ctrl+k"
  },
  // Use ctrl+j and ctrl+k to navigate lists
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  // Use ctrl+l to trigger suggestions to match my Neovim setup
  {
    "key": "ctrl+l",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+l",
    "command": "insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  // Use ctrl+j and ctrl+k to navigate suggestions
  {
    "command": "editor.action.triggerSuggest",
    "key": "ctrl+j",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && suggestWidgetVisible"
  },
  // Toggle Cursor tab with cmd+m
  {
    "key": "cmd+m",
    "command": "editor.cpp.toggle"
  },
  // Use cmd+shift+k for Cursor AI popup
  {
    "key": "shift+cmd+k",
    "command": "aipopup.action.modal.generate",
    "when": "editorFocus && !composerBarIsVisible"
  },
  {
    "key": "cmd+k",
    "command": "-aipopup.action.modal.generate",
    "when": "editorFocus && !composerBarIsVisible"
  },
  {
    "key": "shift+cmd+k",
    "command": "-editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  // Don't let Cursor take over cmd+k in the terminal
  {
    "key": "cmd+k",
    "command": "-cursorai.action.generateInTerminal"
  },
  // Open projects
  {
    "key": "cmd+shift+o",
    "command": "open-project.open",
    "args": {
      "cwd": "~/dev"
    }
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.openRecent"
  },
  // Switch windows
  {
    "key": "cmd+alt+o",
    "command": "workbench.action.switchWindow"
  },
  // Some Vim keybindings I want to run when there are no active editors. This is not exhaustive,
  // but represents the most common keybindings I use in these type of scenarios.
  {
    "key": ";",
    "command": "vim.showQuickpickCmdLine",
    "when": "!editorFocus && !inputFocus"
  },
  // Open Git
  {
    "key": "shift+cmd+g",
    "command": "workbench.view.scm"
  },
  // Mark active file as viewed
  {
    "key": "shift+cmd+v",
    "command": "pr.markFileAsViewed"
  },
  // Close all the panes
  {
    "key": "cmd+shift+i",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.focusActiveEditorGroup",
        "composer.closeComposerTab",
        "workbench.action.closeSidebar",
        "workbench.action.closePanel"
      ]
    }
  },
  {
    "key": "shift+cmd+i",
    "command": "-composer.newAgentChat"
  },
  {
    "key": "shift+cmd+i",
    "command": "-workbench.action.chat.openEditSession",
    "when": "chatEditingParticipantRegistered && chatIsEnabled && view != 'workbench.panel.chat.view.edits'"
  },
  {
    "key": "shift+cmd+[",
    "command": "-workbench.action.previousEditor"
  },
  // Claude Code add newline
  {
    "key": "shift+enter",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": " \n" },
    "when": "terminalFocus && terminalProcessSupported"
  },
  // Claude Code
  {
    "key": "cmd+escape",
    "command": "-claude-code.runClaude.keyboard",
    "when": "claude-code.hasClaudeInPath"
  },
  {
    "key": "cmd+escape",
    "command": "dangerous-claude.run-claude-code"
  },
  // Navigate between editors/terminals, in the current group
  {
    "key": "shift+cmd+[",
    "command": "workbench.action.previousEditorInGroup",
    "when": "!terminalFocus || terminalEditorFocus"
  },
  {
    "key": "shift+cmd+]",
    "command": "workbench.action.nextEditorInGroup",
    "when": "!terminalFocus || terminalEditorFocus"
  },
  {
    "key": "alt+cmd+left",
    "command": "-workbench.action.previousEditor"
  },
  // Switch between editor groups
  {
    "key": "cmd+shift+'",
    "command": "workbench.action.focusNextGroup"
  },
  // Toggle pane/terminal
  {
    "key": "shift+cmd+j",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "shift+cmd+j",
    "command": "-aiSettings.action.open",
    "when": "!isSettingsPaneOpen"
  },
  // Git
  {
    "key": "cmd+k c",
    "command": "git.checkout",
    "when": "!terminalFocus"
  },
  {
    "key": "cmd+k p",
    "command": "git.push",
    "when": "!terminalFocus"
  },
  {
    "key": "cmd+k shift+p",
    "command": "git.pull",
    "when": "!terminalFocus"
  },
  {
    "key": "cmd+k a",
    "command": "git-utils.git-append",
    "when": "!terminalFocus"
  },
  {
    "key": "cmd+k s",
    "command": "git-utils.git-sync",
    "when": "!terminalFocus"
  },
  // Quick switch between compose modes
  {
    "key": "cmd+i",
    "command": "composerMode.agent"
  },
  {
    "key": "cmd+l",
    "command": "composerMode.chat"
  },
  // Go to symbol
  {
    "key": "cmd+y",
    "command": "workbench.action.gotoSymbol"
  },
  // Since I use cmd+option+f for maximize window, I need to adjust replace
  {
    "key": "ctrl+cmd+f",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "alt+cmd+f",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "shift+cmd+]",
    "command": "-workbench.action.nextEditor"
  },
  // Toggle diff
  {
    "key": "shift+cmd+d",
    "command": "git.openChange",
    "when": "!inDiffEditor"
  },
  {
    "key": "shift+cmd+d",
    "command": "git.closeAllDiffEditors",
    "when": "inDiffEditor"
  }
]
